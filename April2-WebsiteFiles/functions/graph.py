import matplotlib
matplotlib.use('Agg')
import matplotlib.pyplot as plt
import os
import io
from firebase_storage_setup import get_storage_bucket

bucket = get_storage_bucket()

# Graph Solar Power
def generate_power_graph(time_points, solar_power_full, userId, projectId):
    """
    Plot the solar profile.

    Parameters:
    - time_points: Array representing time points.
    - solar_power_full: A numpy array representing the load profile.
    """
    plt.figure(figsize=(12, 6))
    plt.plot(time_points, solar_power_full, label='Solar Power Generation')
    plt.title('Micro-Grid Solar Power Simulation')
    plt.xlabel('Time (hours)')
    #plt.xlim(0, 48)
    plt.ylabel('Power (kW)')
    plt.legend()
    plt.grid(True)
    
    plot_stream = io.BytesIO()
    plt.savefig(plot_stream, format='png')
    plt.close()
    plot_stream.seek(0)

    blob_path = f"{userId}/{projectId}/solar_plot.png"
    blob = bucket.blob(blob_path)
    blob.upload_from_file(plot_stream, content_type='image/png')

    return blob_path  # Return the path to the saved plot


def plot_load_profile(time_points, load_profile, userId, projectId):
    """
    Plot the load profile.

    Parameters:
    - time_points: Array representing time points.
    - load_profile: A numpy array representing the load profile.
    """
    plt.figure(figsize=(12, 6))
    plt.plot(time_points, load_profile, label='Load Profile')
    plt.title('Micro-Grid Load Profile Simulation')
    plt.xlabel('Time (hours)')
    plt.ylabel('Load (kW)')
    plt.legend()
    plt.grid(True)
    
    plot_stream = io.BytesIO()
    plt.savefig(plot_stream, format='png')
    plt.close()
    plot_stream.seek(0)

    blob_path = f"{userId}/{projectId}/load_plot.png"
    blob = bucket.blob(blob_path)
    blob.upload_from_file(plot_stream, content_type='image/png')

    return blob_path  # Return the path to the saved plot

def plot_wind_energy(time_points, hourly_wind_energy, userId, projectId):
    """
    Plot the wind energy.

    Parameters:
    - time_points: Array representing time points.
    - hourly_wind_energy: A numpy array representing the energy generated by wind every hour.
    """
    plt.figure(figsize=(12, 6))
    plt.plot(time_points, hourly_wind_energy, label='Wind Energy')
    plt.title('Micro-Grid Wind Energy')
    plt.xlabel('Time (hours)')
    plt.ylabel('Energy (kW)')
    plt.legend()
    plt.grid(True)
    
    plot_stream = io.BytesIO()
    plt.savefig(plot_stream, format='png')
    plt.close()
    plot_stream.seek(0)

    blob_path = f"{userId}/{projectId}/wind_plot.png"
    blob = bucket.blob(blob_path)
    blob.upload_from_file(plot_stream, content_type='image/png')

    return blob_path  # Return the path to the saved plot

def plot_generic(time_points, energy, label, title, filename, userId, projectId):
    """
    Plot some energy over time. 

    Parameters:
    - time_points: Array representing time points.
    - energy: A numpy array representing the energy every hour.
    - name: a string representing the label
    """
    print("in plot generic")
    plt.figure(figsize=(12, 6))
    plt.plot(time_points, energy, label=label)
    plt.title(title)
    plt.xlabel('Time (hours)')
    plt.ylabel('Energy (kW)')
    plt.legend()
    plt.grid(True)
    
    plot_stream = io.BytesIO()
    plt.savefig(plot_stream, format='png')
    plt.close()
    plot_stream.seek(0)

    blob_path = f"{userId}/{projectId}/{filename}_plot.png"
    blob = bucket.blob(blob_path)
    blob.upload_from_file(plot_stream, content_type='image/png')

    return blob_path  # Return the path to the saved plot


def plot_net_energy(time_points, net_energy, load, solar, wind, diesel, title, filename, userId, projectId):
    """
    Plot the net energy.

    Parameters:
    - time_points: Array representing time points.
    - ...
    """
    plt.figure(figsize=(12, 6))
    plt.plot(time_points, net_energy, label='Net Energy')
    plt.plot(time_points, load, label='Load')
    plt.plot(time_points, solar, label='Solar')
    plt.plot(time_points, wind, label='Wind')
    plt.plot(time_points, diesel, label='Diesel')
    plt.title(title)
    plt.xlabel('Time (hours)')
    plt.ylabel('Energy (kW)')
    plt.legend()
    plt.grid(True)
    
    plot_stream = io.BytesIO()
    plt.savefig(plot_stream, format='png')
    plt.close()
    plot_stream.seek(0)

    blob_path = f"{userId}/{projectId}/{filename}_plot.png"
    blob = bucket.blob(blob_path)
    blob.upload_from_file(plot_stream, content_type='image/png')

    return blob_path  # Return the path to the saved plot
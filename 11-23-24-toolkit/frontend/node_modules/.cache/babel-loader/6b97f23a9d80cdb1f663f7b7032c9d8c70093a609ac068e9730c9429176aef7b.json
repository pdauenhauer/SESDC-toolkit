{"ast":null,"code":"var _jsxFileName = \"/Users/jessicahuang/Personal Capstone Workspace/11-23-24-toolkit/frontend/src/Components/UploadForm.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction UploadForm() {\n  _s();\n  const [file, setFile] = useState(null); //store the uploaded file\n  const [responseMessage, setResponseMessage] = useState(\"\"); //to display server response\n  const [imageUrl, setImageUrl] = useState(null);\n  const handleFileChange = event => {\n    setFile(event.target.files[0]); //update the file state with the selected file\n    console.log(\"File selected:\", event.target.files[0]); //debug\n  };\n  const handleSubmit = async event => {\n    event.preventDefault();\n    console.log(\"Uploading file:\", file);\n    if (!file) {\n      alert(\"Please upload a file first.\");\n      return;\n    }\n    const formData = new FormData();\n    formData.append(\"file\", file); //append the file to the FormData object\n\n    try {\n      console.log(\"fetching response...\");\n      const response = await fetch(\"http://localhost:8080/upload\", {\n        method: \"POST\",\n        body: formData\n      });\n      console.log(\"Response status:\", response.status);\n      if (!response.ok) {\n        // Log the full response for debugging\n        console.log(\"Response not accepted\");\n        const errorData = await response.json();\n        console.error(\"Server error:\", errorData);\n        throw new Error(errorData.error || \"File upload failed.\");\n      }\n      const data = await response.json();\n      console.log(\"Data from backend:\", data);\n      if (data.message) {\n        setResponseMessage(data.message);\n      } else {\n        alert(\"Message not found in response.\");\n      }\n      if (data.plot_url) {\n        setImageUrl(data.plot_url); //set the plot image URL returned from the backend\n      }\n    } catch (error) {\n      console.error(\"Error uploading file:\", error);\n      setResponseMessage(\"Error uploading file.\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Upload CSV File\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        accept: \".csv\",\n        onChange: handleFileChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Upload\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), responseMessage && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: responseMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 27\n    }, this), imageUrl && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Generated Graph:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: `http://localhost:8080/${imageUrl}`,\n        alt: \"Generated graph\",\n        style: {\n          maxWidth: '100%'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 20\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n}\n_s(UploadForm, \"w5wTXoWkKHF3v9kd9eR01MpbQ5k=\");\n_c = UploadForm;\n;\nexport default UploadForm;\nvar _c;\n$RefreshReg$(_c, \"UploadForm\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","UploadForm","_s","file","setFile","responseMessage","setResponseMessage","imageUrl","setImageUrl","handleFileChange","event","target","files","console","log","handleSubmit","preventDefault","alert","formData","FormData","append","response","fetch","method","body","status","ok","errorData","json","error","Error","data","message","plot_url","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","accept","onChange","src","alt","style","maxWidth","_c","$RefreshReg$"],"sources":["/Users/jessicahuang/Personal Capstone Workspace/11-23-24-toolkit/frontend/src/Components/UploadForm.js"],"sourcesContent":["import React, { useState } from \"react\";\n\nfunction UploadForm() {\n  const [file, setFile] = useState(null); //store the uploaded file\n  const [responseMessage, setResponseMessage] = useState(\"\"); //to display server response\n  const [imageUrl, setImageUrl] = useState(null);\n\n  const handleFileChange = (event) => {\n    setFile(event.target.files[0]); //update the file state with the selected file\n    console.log(\"File selected:\", event.target.files[0]); //debug\n  };\n\n  const handleSubmit = async (event) => {\n    event.preventDefault();\n    console.log(\"Uploading file:\", file);\n\n    if (!file) {\n      alert(\"Please upload a file first.\");\n      return;\n    }\n\n    const formData = new FormData();\n    formData.append(\"file\", file); //append the file to the FormData object\n\n    try {\n      console.log(\"fetching response...\");\n      const response = await fetch(\"http://localhost:8080/upload\", {\n        method: \"POST\",\n        body: formData,\n      });\n      console.log(\"Response status:\", response.status);\n\n      if (!response.ok) {\n        // Log the full response for debugging\n\tconsole.log(\"Response not accepted\");\n        const errorData = await response.json();\n        console.error(\"Server error:\", errorData);\n        throw new Error(errorData.error || \"File upload failed.\");\n      }\n\n      const data = await response.json();\n      console.log(\"Data from backend:\", data);\n\n      if (data.message) {\n\t  setResponseMessage(data.message);\n      } else {\n\t  alert(\"Message not found in response.\");\n      }\n\n      if (data.plot_url) {\n          setImageUrl(data.plot_url);  //set the plot image URL returned from the backend\n      }\n\n    } catch (error) {\n      console.error(\"Error uploading file:\", error);\n      setResponseMessage(\"Error uploading file.\");\n    }\n  };\n\n  return (\n    <div>\n      <h2>Upload CSV File</h2>\n      <form onSubmit={handleSubmit}>\n        <input type=\"file\" accept=\".csv\" onChange={handleFileChange} />\n        <button type=\"submit\">Upload</button>\n      </form>\n      {responseMessage && <p>{responseMessage}</p>}\n      {/* Display the generated plot image */}\n      {imageUrl && <div>\n          <h3>Generated Graph:</h3>\n          <img src={`http://localhost:8080/${imageUrl}`} alt=\"Generated graph\" style={{ maxWidth: '100%' }} />\n      </div>}\n    </div>\n  );\n};\n\nexport default UploadForm;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}